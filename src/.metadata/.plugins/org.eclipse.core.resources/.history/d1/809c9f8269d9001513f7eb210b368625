package game.controllers.pacman.osc;

import game.core.G;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import game.core.Game;
import java.util.*;
import java.util.ArrayList;



public class Sensors {

	/**
	 * The current setup will return a close approximation of the sensors used in: 
	 * Jacob Schrum and Risto Miikkulainen, "Discovering Multimodal Behavior in 
	 * Ms. Pac-Man through Evolution of Modular Neural Networks", IEEE Transactions 
	 * on Computational Intelligence and AI in Games (2015). 
	 *
	 * There are 7 non-directed sensors plus 22 directed sensors for each of 4 directions,
	 * for a total of (7 + (4 * 22)) = 95 sensors.
	 */

	final int NUM_SENSORS = 95;
	final int MAX_DISTANCE = 200;

	public double[] read(Game game){
		int currentLocation = game.getCurPacManLoc();
		int numReadings = 0;
		double[] sensorReadings = new double[NUM_SENSORS];
		for (int i = 0; i < NUM_SENSORS; i++) sensorReadings[i]=0.0;
		
		int[] prevGhostDistances = {1,1,1,1};

		int[] neighbours;

		/* Common Undirected ***************************************/

		//Proportion Power Pills
		sensorReadings[numReadings++] = (double)game.getNumActivePowerPills() / (double)game.getNumberPowerPills(); 
		//Proportion Pills
		sensorReadings[numReadings++] = (double)game.getNumActivePills() / (double)game.getNumberPills(); 

		//Number of Edible Ghosts
		int numEdibleGhosts = 0;
		int totalLairTime = 0;
		double remainingGhostEdibleTime = 0;
		for (int i = 0; i < Game.NUM_GHOSTS; i++){
			if (game.isEdible(i)){
				numEdibleGhosts++;
				remainingGhostEdibleTime += game.getEdibleTime(i);
			}
			totalLairTime += game.getLairTime(i);
		}
		sensorReadings[numReadings++] = (double)numEdibleGhosts / (double)Game.NUM_GHOSTS; 

		//Remaining Ghost Edible Time
		sensorReadings[numReadings++] = ((double)remainingGhostEdibleTime / (double)Game.NUM_GHOSTS)/(MAX_DISTANCE/2);

		//Any Ghosts Edible?
		sensorReadings[numReadings++] = numEdibleGhosts > 0 ? 1 : 0; 

		//All Threat Ghosts Present?
		sensorReadings[numReadings++] = !(totalLairTime > 0) && (numEdibleGhosts == 0) ? 1 : 0; 

		//Close to Power Pill?
		int closestPowerPillDistance = Integer.MAX_VALUE;
		int[] activePowerPills=game.getPowerPillIndicesActive();
		if (activePowerPills.length > 0){
			int closestPowerPillTarget = game.getTarget(currentLocation,activePowerPills,true,G.DM.PATH);
			closestPowerPillDistance = game.getPathDistance(currentLocation, closestPowerPillTarget);
		}
		sensorReadings[numReadings++] = closestPowerPillDistance < 10 ? 1 : 0;

		/* Directed **********************************************/

		for (int dir = 0; dir < 4; dir++){

			/* Common Directed ***************************************/

			double d;
			//Distance to closest regular pill in given direction
			d = distToClosestTargetInDir(game, game.getPillIndicesActive(), dir);
			sensorReadings[numReadings++] = d == Integer.MAX_VALUE ? 1 : d/MAX_DISTANCE; 
			//Distance to closest power pill in given direction
			d = distToClosestTargetInDir(game, game.getPowerPillIndicesActive(), dir);
			sensorReadings[numReadings++] = d == Integer.MAX_VALUE ? 1 : d/MAX_DISTANCE;
			//Distance to closest maze junction in given direction
			d = distToClosestTargetInDir(game, game.getJunctionIndices(), dir);
			sensorReadings[numReadings++] = d == Integer.MAX_VALUE ? 1 : d/MAX_DISTANCE;

			//Conflict Ghost Sensors

			int[] junctions = game.getJunctionIndices();
			ArrayList<GhostSensorReading> ghostSensors = new ArrayList<GhostSensorReading>();
			for (int i = 0; i < Game.NUM_GHOSTS; i++){
				double distToGhost = game.getLairTime(i) == 0 ? ((double)game.getPathDistance(currentLocation, game.getCurGhostLoc(i)))/MAX_DISTANCE : 1;

				int ghostApproaching = 	0;
				if (game.getLairTime(i) == 0)
					ghostApproaching = game.getNextGhostDir(i, currentLocation, true,G.DM.PATH) == game.getCurGhostDir(i) ? 1 : 0;

				int pathToGhostContainsJunction = 0;
				int[] path;
				if (game.getLairTime(i) == 0){
					path = game.getPath(currentLocation, game.getCurGhostLoc(i));
					for (int j = 0; j < junctions.length && pathToGhostContainsJunction == 0; j++)
						if (countOccurrences(junctions[j], path) > 0)
							pathToGhostContainsJunction = 1;	
				}

				int ghostEdible = 0;
				if (game.getLairTime(i) == 0) 
					ghostEdible = game.isEdible(i) ? 1 : 0;

				ghostSensors.add(new GhostSensorReading(distToGhost, ghostApproaching, pathToGhostContainsJunction, ghostEdible));
			}
			Collections.sort(ghostSensors);

			for (int i = 0; i < ghostSensors.size(); i++){
				sensorReadings[numReadings++] = ghostSensors.get(i).distance;
				sensorReadings[numReadings++] = ghostSensors.get(i).ghostApproaching;
				sensorReadings[numReadings++] = ghostSensors.get(i).pathToGhostContainsJunction;
				sensorReadings[numReadings++] = ghostSensors.get(i).ghostEdible;
			}

			neighbours = game.getPacManNeighbours();		
			//Number of pills on the path in the given direction that has the most pills
			sensorReadings[numReadings++] = neighbours[dir] != -1 ? maxTargetsIn30Steps(game.copy(),dir, game.getPillIndicesActive(),4) : 0;
			//Number of junctions on the path in the given direction that has the most junctions
			sensorReadings[numReadings++] = neighbours[dir] != -1 ? maxTargetsIn30Steps(game.copy(),dir, game.getJunctionIndices(),7) : 0;
			//OFNJ
			sensorReadings[numReadings++] = OFNJ(game, dir);
		}

		//		DecimalFormat df = new DecimalFormat("0", DecimalFormatSymbols.getInstance(Locale.ENGLISH));
		//		df.setMaximumFractionDigits(5); //340 = DecimalFormat.DOUBLE_FRACTION_DIGITS
		//		
		//		System.out.print("state:");
		//		for (int i = 1; i < numReadings; i++)//skip bias
		//			System.out.print(" " + df.format(sensorReadings[i]));
		//		System.out.println();

		return sensorReadings;
	}

	/**
	 * Number of target on the path in the given direction that has the most targets
	 *
	 * @param game the game state 
	 * @param dir the direction
	 * @param targets array of targets
	 * @param stepsBetweenTargets steps between targets (4.0 for pills, 7.0 for junctions
	 * @return distToClosestTargetInDir is the node index of closest target
	 */
	public double maxTargetsIn30Steps(Game game, int dir, int[] targets, int stepsBetweenTargets){	
		int stepCount = 30;
		boolean max = true;
		final int currentLocation=game.getCurPacManLoc();
		final int[] neighbors = game.getPacManNeighbours();
		final int next = neighbors[dir];
		assert next != -1 : "The next direction is not viable!";
		ArrayList<Integer> visited = new ArrayList<Integer>();
		visited.add(currentLocation);
		double count = countMembersAlongPath(game.copy(), visited, targets, currentLocation, next, stepCount, max);
		double maxCount = (int) Math.ceil((double)stepCount / (double)stepsBetweenTargets);
		return maxCount == 0 ? 0 : count / maxCount; // Normalized
	}

	/**
	 * Recursive method for counting the number of targets along paths a certain
	 * number of steps from the starting point in a given direction.
	 *
	 * @param game the game state
	 * @param visited locations that have already been visited along the given
	 * path. Note that the path may loop on to itself, and then continue on into
	 * new areas.
	 * @param targets objects that should be counted if they occur along the
	 * path
	 * @param sourceLocation where pacman came from. Cannot go back to this
	 * location.
	 * @param currentLocation where pacman currently is
	 * @param remainingSteps How much further to continue along the path.
	 * @return maximum number of targets found along all available paths
	 */
	public  int countMembersAlongPath(Game game, ArrayList<Integer> visited, int[] targets, int sourceLocation, int currentLocation, int remainingSteps, boolean max) {
		assert visited.contains(sourceLocation) : "Must have visited source location";
		if (remainingSteps == 0) {
			return 0;
		} else {
			final int[] neighbors = new int[4];
			neighbors[0] = game.getNeighbour(currentLocation,0);
			neighbors[1] = game.getNeighbour(currentLocation,1);
			neighbors[2] = game.getNeighbour(currentLocation,2);
			neighbors[3] = game.getNeighbour(currentLocation,3);
			boolean foundReverse = false;
			for (int i = 0; i < neighbors.length && !foundReverse; i++) {
				if (neighbors[i] == sourceLocation) {
					neighbors[i] = -1; // Don't go backwards
					foundReverse = true;	
				}
			}
			assert foundReverse : "Should always find the reverse direction";
			int aggregateCount = max ? -1 : Integer.MAX_VALUE;
			visited.add(currentLocation);
			for (int i = 0; i < neighbors.length; i++) {
				if (neighbors[i] != -1) {
					int count = countMembersAlongPath(game.copy(), visited, targets, currentLocation, neighbors[i], remainingSteps - 1, max);
					aggregateCount = max ? Math.max(aggregateCount, count) : Math.min(aggregateCount, count);
				}
			}
			assert visited.get(visited.size() - 1) == currentLocation : "Should be popping the currentLocation off end of list";
			visited.remove(visited.size() - 1); // Should remove currentLocation
			boolean alreadyCounted = visited.contains(currentLocation);
			int targetsToCount = alreadyCounted ? 0 : countOccurrences(currentLocation, targets);
			return aggregateCount + targetsToCount;
		}
	}

	/**
	 * Options From Next Junction (OFNJ)
	 * 
	 * Looks at the next junction in a given direction, and counts the
	 * number of subsequent junctions that can be safely reached from 
	 * the first junction. The safety of a route can be determined by 
	 * taking all agent distances into account and conservatively 
	 * assuming ghosts will follow the shortest path to the target 
	 * junction.
	 *
	 * @param game the game state
	 * @param dir the direction
	 */
	public double OFNJ(Game game, int dir){
		int[] neighbours = game.getPacManNeighbours();
		if (neighbours[dir] == -1) return 0;
		int[] junctions = game.getJunctionIndices();
		int closestSafeJunctionInDir = closestSafeTargetInDir(game, junctions, dir);
		if (closestSafeJunctionInDir < 0) return 0.0;
		//Options from Junction
		int[] safeDirFromClosestSafeJunction = {0,0,0,0};
		for (int j = 0; j < junctions.length; j++)
			if (junctions[j] != closestSafeJunctionInDir && isPacManCloserThanAnyThreatGhost(game, junctions[j]))
				safeDirFromClosestSafeJunction[game.getNextPacManDir(junctions[j], true, G.DM.PATH)]++;

		int numSafeDirFromClosestSafeJunction = 0;
		for (int i = 0; i < safeDirFromClosestSafeJunction.length; i++)
			if(safeDirFromClosestSafeJunction[i] > 0) numSafeDirFromClosestSafeJunction++;
		return (double)numSafeDirFromClosestSafeJunction/safeDirFromClosestSafeJunction.length;
	}

	/**
	 * Returns the node index of the closest target in a given
	 * direction that pacman can reach before any threat ghost.
	 *
	 * @param game the game state
	 * @param targets array of targets 
	 * @param dir the direction
	 * @return target is the node index of closest safe target
	 */
	public int closestSafeTargetInDir(Game game, int[] targets, int dir){
		int currentLocation = game.getCurPacManLoc();
		int distToClosestTargetInDir = Integer.MAX_VALUE;
		int target = -1;
		for(int i = 0; i < targets.length; i++)
			if (dir == game.getNextPacManDir(targets[i],true,G.DM.PATH) && isPacManCloserThanAnyThreatGhost(game, targets[i])){
				distToClosestTargetInDir = Math.min(distToClosestTargetInDir, game.getPathDistance(currentLocation, targets[i]));
				target = targets[i];
			}
		return target;
	}

	/**
	 * Returns the node index of the closest target in a given 
	 * direction.
	 *
	 * @param game the game state
	 * @param targets array of targets 
	 * @param dir the direction
	 * @return distToClosestTargetInDir is the node index of closest target
	 */
	public int distToClosestTargetInDir(Game game, int[] targets, int dir){
		int currentLocation = game.getCurPacManLoc();
		int distToClosestTargetInDir = Integer.MAX_VALUE;
		for(int i = 0; i < targets.length; i++)
			if (dir == game.getNextPacManDir(targets[i],true,G.DM.PATH))
				distToClosestTargetInDir = Math.min(distToClosestTargetInDir, game.getPathDistance(currentLocation, targets[i]));			
		return distToClosestTargetInDir;
	}

	/**
	 * @param game the game state
	 * @param target node index of target
	 * @param dir the direction
	 * @return true if pacman is closer to target than any threat ghost
	 */
	public boolean isPacManCloserThanAnyThreatGhost(Game game, int target){
		int currentLocation = game.getCurPacManLoc();
		for (int i = 0; i < Game.NUM_GHOSTS; i++){   
			if (game.getLairTime(i) == 0  && !game.isEdible(i))
				if (game.getPathDistance(currentLocation, target) > game.getGhostPathDistance(i,target)) 
					return false;
		}
		return true;
	}

	/**
	 * Count number of occurrences of the given value in the array
	 *
	 * @param value value to look for
	 * @param array set of values
	 * @return count of occurrences of value
	 */
	public int countOccurrences(int value, int[] array) {
		int total = 0;
		for (int i = 0; i < array.length; i++) {
			if (array[i] == value) {
				total++;
			}
		}
		return total;
	}

	public static String fmt(double d)
	{
		if(d == (long) d)
			return String.format("%d",(long)d);
		else
			return String.format("%s",d);
	}
}
