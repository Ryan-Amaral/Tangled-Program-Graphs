package pacman;

import edu.utexas.cs.nn.log.DeathLocationsLog;
import edu.utexas.cs.nn.log.MONELog;
import edu.utexas.cs.nn.parameters.Parameters;
import edu.utexas.cs.nn.tasks.mspacman.agentcontroller.pacman.StaticPacManController;
import edu.utexas.cs.nn.tasks.mspacman.data.ScentPath;
import edu.utexas.cs.nn.tasks.mspacman.facades.GameFacade;
import edu.utexas.cs.nn.util.CombinatoricUtilities;
import edu.utexas.cs.nn.util.MiscUtil;
import java.io.*;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.Random;
import java.util.Scanner;
import pacman.controllers.Controller;
import pacman.controllers.HumanController;
import pacman.controllers.examples.Legacy;
import pacman.controllers.examples.NearestPillPacMan;
import pacman.controllers.examples.StarterGhosts;
import static pacman.game.Constants.DELAY;
import pacman.game.Constants.GHOST;
import static pacman.game.Constants.INTERVAL_WAIT;
import pacman.game.Constants.MOVE;
import pacman.game.Game;
import pacman.game.GameView;
import com.illposed.osc.*;
import dal.experiment.RunSocketServer;
import dal.experiment.RunTrainedNetworks;
import edu.utexas.cs.nn.tasks.mspacman.agentcontroller.pacman.NNMsPacMan;
import edu.utexas.cs.nn.tasks.mspacman.facades.PacManControllerFacade;
import edu.utexas.cs.nn.tasks.mspacman.sensors.BlockLoadedInputOutputMediator;
import edu.utexas.cs.nn.util.random.RandomNumbers;
import java.util.Date;
import java.net.InetAddress;
import pacman.controllers.NewPacManController;
import edu.utexas.cs.nn.tasks.mspacman.agentcontroller.pacman.NNCheckEachDirectionPacManController;
import pacman.controllers.examples.*;

/**
 * This class may be used to execute the game in timed or un-timed modes, with
 * or without visuals. Competitors should implement their controllers in
 * game.entries.ghosts and game.entries.pacman respectively. The skeleton
 * classes are already provided. The package structure should not be changed
 * (although you may create sub-packages in these packages).
 */
@SuppressWarnings("unused")
public class CopyOfExecutor {

	long next_game_seed;
    int timestep;
    Game game;
    MOVE nextMove;
    boolean sleep;
    boolean visual;
    boolean show_moves;
    boolean newGame;
    boolean moveReady;
    boolean use_random_seed;
    OSCPortIn serverPort;
    long time_start;
    
    public   void runExperiment_Socket(Controller<MOVE> pacManController, Controller<EnumMap<GHOST, MOVE>> ghostController, Game initGameState) {
    	 
    	
    	sleep = false;
        visual = false;
        show_moves = false;
        use_random_seed = true;
        next_game_seed = 0;
        
        try {
            int game_server_port = Parameters.parameters.integerParameter("randomSeed");
            InetAddress agent_IP = InetAddress.getLocalHost();
            int agent_port = game_server_port + 1;
            moveReady = false; newGame = false; 

            //Set up sockets
            OSCPortOut outgoingPort = new OSCPortOut(agent_IP, agent_port);
            serverPort = new OSCPortIn(game_server_port);
            
            
            //------------------------------------------------------------------
            //Set up listener - START
            OSCListener start = new OSCListener() {
                public void acceptMessage(Date time, OSCMessage message) {
                    //System.out.println("\n\nNew Game");
                    use_random_seed = true;
                    newGame = true;
                    moveReady = true; 
                }
            }; serverPort.addListener("start", start);
            
            //Set up listener - ACT
            OSCListener act = new OSCListener(){
                public void acceptMessage(Date time, OSCMessage message) {
                    switch ((Integer)message.getArguments()[0]) {
                            case 0: nextMove = MOVE.UP; break;
                            case 1: nextMove = MOVE.RIGHT; break;
                            case 2: nextMove = MOVE.DOWN; break;
                            case 3: nextMove = MOVE.LEFT; break;
                            default: nextMove = MOVE.NEUTRAL; 
                            System.out.println("ERROR: Invalid MOVE: " + (Integer)message.getArguments()[0]);
                    }
                    timestep = (Integer)message.getArguments()[1];
                    moveReady = true; 
                }
            }; serverPort.addListener("act", act);
            
            //Set up listener - EXIT
            OSCListener exit = new OSCListener(){
                public void acceptMessage(Date time, OSCMessage message) {
                    System.out.println("END");
                    serverPort.stopListening();
                    serverPort.close();
                    try {Thread.sleep(500);}catch(Exception e){}
                    System.exit(0);
                }
            }; serverPort.addListener("exit", exit);
            
            
            //------------------------------------------------------------------
            //Set up listener - STARTWITHSEED
            OSCListener startwithseed = new OSCListener() {
                public void acceptMessage(Date time, OSCMessage message) {
                    next_game_seed = Long.parseLong((String)message.getArguments()[0]);
                    use_random_seed = false;
                    newGame = true;
                    moveReady = true; 
                }
            }; serverPort.addListener("startwithseed", startwithseed);
            
            //Set up listener - SHOWMOVES
            OSCListener setshowmoves = new OSCListener() {
                public void acceptMessage(Date time, OSCMessage message) {
                    show_moves = true;
                }
            }; serverPort.addListener("showmoves", setshowmoves);
            
            //Set up listener - VISUAL
            OSCListener setvisual = new OSCListener(){
                public void acceptMessage(Date time, OSCMessage message) {
                    visual = true;
                }
            }; serverPort.addListener("visual", setvisual);
            
            //------------------------------------------------------------------
            //Set up listener - SLEEP
            OSCListener setsleep = new OSCListener() {
                public void acceptMessage(Date time, OSCMessage message) {
                    sleep = true;
                }
            }; serverPort.addListener("sleep", setsleep);
            
            
            //Set up listener - WAKE
            OSCListener setwake = new OSCListener() {
                public void acceptMessage(Date time, OSCMessage message) {
                    sleep = false;
                }
            }; serverPort.addListener("wake", setwake);
            
//............................................................................//            
            
            //Wait for initial start command
            serverPort.startListening();
            System.out.println("Server Port: " + game_server_port);
            System.out.println("Waiting...");
            while (newGame == false || moveReady == false) {System.out.print("");}
            moveReady = false; newGame = false; timestep = 0;
            
            //Create new game
            game = createNewGame(initGameState);
            pacManController.threadRevive();
            System.out.println("Started!");
            GameView gv = null;if (visual) {gv = new GameView(game).showGame();}
            
            //Play game.........................................................
            while (true) {   
                OSCMessage msg = new OSCMessage("state");
                System.out.println(game.getEatenPills());
                //Update NN inputs based on game state
                if ( null == pacManController.getMove(game.copy(), -1) && game.getMoveNum() > 10) {
                    //null is a special end game code
                    game.advanceGame(null, ghostController.getMove(game.copy(), -1));
                }
                
                //Save time_step, episode_end, reward, pills eaten, X-Y coordinates
                msg.addArgument((float)timestep);
                msg.addArgument((float)((game.gameOver())?1:0));
                msg.addArgument((float)game.getScore());
                msg.addArgument((float)game.getEatenPills());
                msg.addArgument((float)game.getNodeXCood(game.getPacmanCurrentNodeIndex()));
                msg.addArgument((float)game.getNodeYCood(game.getPacmanCurrentNodeIndex()));
                
                
                //Save neighbours - Pacman cannot go to direction of -1 (a wall)
                int aNonWall = -1;
                GameFacade gs = new GameFacade(game);
                int currentNodeIndex = gs.getPacmanCurrentNodeIndex();
                int[] neighbours = gs.neighbors(currentNodeIndex);
                for (int i = 0; i < neighbours.length; i++) {
                    msg.addArgument((float)neighbours[i]);
                    if (neighbours[i] != -1) aNonWall = i;
                }
                
                //Save NN inputs
                double inputs[][] = NNCheckEachDirectionPacManController.full_inputs;
                int nonDirectionOrientedIndex[] = {0,22,23,24,25,26,27,28}; //for onelifeconflict
                //int nonDirectionOrientedIndex[] = {0,30,31,32,33,34,35,36};
                
                // ----- first save the non direction-oriented inputs
                for (int i = 0; i < nonDirectionOrientedIndex.length; i++) {
                    msg.addArgument((float)inputs[aNonWall][nonDirectionOrientedIndex[i]]);
                }
                
                // ----- save the remaining direction-oriented inputs
                for (int i = 0; i < 4; i++) {
                    for (int j = 1; j < 22; j++) // j < 22/30
                        msg.addArgument((float)inputs[i][j]);
                    msg.addArgument((float)inputs[i][29]); // [29/37]
                } 
                
                /* Old save NN inputs
                double inputs[] = BlockLoadedInputOutputMediator.this_is_the_inputs;
                for (int i = 0; i < inputs.length; i++){
                    msg.addArgument((float)inputs[i]);
                }*/ 
                
                if (show_moves) System.out.print(timestep + ", " + game.getScore() + " | Next Action: ");
                
                //Send inputs to outgoingSocket
                outgoingPort.send(msg);
                
                //Get next MOVE from incomingSocket
                while (moveReady == false) {
                    if (sleep) {try{Thread.sleep(1000);}catch(Exception e){System.out.print("");}}
                    else {System.out.print("");}
                } moveReady = false;
                
                //Advance game
                if (!newGame) {
                    if (show_moves) System.out.println(nextMove);
                    if (!game.gameOver()) {
                        game.advanceGame(nextMove, ghostController.getMove(game.copy(), -1));
                    } else { System.out.println("GameOver Error"); System.exit(0);} 
                }
                else {                    
                    if (show_moves) System.out.println("End");
                    game = createNewGame(initGameState);
                    pacManController.threadRevive();
                    timestep = 0;
                    newGame = false;
                    if (visual){gv = new GameView(game).showGame();}
                }
                if (visual) repaintGame(gv);
                
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public Game createNewGame(Game initGameState) {
        //game = (new GameFacade(new Game(deterministic ? num : RandomNumbers.randomGenerator.nextLong()))).newG;
        long theSeed = (use_random_seed)? RandomNumbers.randomGenerator.nextLong(): next_game_seed;
        use_random_seed = true;
        if (show_moves) System.out.println("\nCreating new game... (seed: " + theSeed + ")");
        Game newgame = (new GameFacade(new Game(theSeed))).newG;
        newgame.setExitLairEdible(initGameState.getExitLairEdible());
        newgame.setEndOnlyOnTimeLimit(initGameState.getEndOnlyOnTimeLimit());
        newgame.setRandomLairExit(initGameState.getRandomLairExit());
        newgame.setSimultaneousLairExit(initGameState.getSimultaneousLairExit());
        newgame.setEndAfterGhostEatingChances(initGameState.getEndAfterGhostEatingChances());
        if(initGameState.getPlayWithoutPill()) newgame.playWithoutPills(); else newgame.playWithPills();
        if(initGameState.getPlayWithoutPowerPills()) newgame.playWithoutPowerPills(); else newgame.playWithPowerPills();
        newgame.setEndAfterPowerPillsEaten(initGameState.getEndAfterPowerPillsEaten());
        return newgame;
    }
    
    int time_between_repaint = 40;
    long time_diff;
    long sleep_time;
    public void repaintGame(GameView gv) {
        time_diff = System.currentTimeMillis() - time_start;
        sleep_time = time_between_repaint - time_diff;
        if (sleep_time > 0) {
            try {
                Thread.sleep(sleep_time);
            } catch (Exception e) {} 
        }
        gv.repaint();
        time_start = System.currentTimeMillis();
    }
//    
//    
//    /**
//     * Run a game in asynchronous mode: the game waits until a move is returned.
//     * In order to slow thing down in case the controllers return very quickly,
//     * a time limit can be used. If fasted gameplay is required, this delay
//     * should be put as 0.
//     *
//     * @param pacManController The Pac-Man controller
//     * @param ghostController The Ghosts controller
//     * @param visual Indicates whether or not to use visuals
//     * @param delay The delay between time-steps
//     */
//    public void runGame(Controller<MOVE> pacManController, Controller<EnumMap<GHOST, MOVE>> ghostController, boolean visual, int delay) {
//        Game game = new Game(0);
//
//        GameView gv = null;
//
//        if (visual) {
//            gv = new GameView(game).showGame();
//        }
//
//        while (!game.gameOver()) {
//            game.advanceGame(pacManController.getMove(game.copy(), -1), ghostController.getMove(game.copy(), -1));
//            
//            try {
//                Thread.sleep(delay);
//            } catch (Exception e) {
//            }
//
//            if (visual) {
//                gv.repaint();
//            }
//        }
//    }
//
//    /**
//     * Run the game with time limit (asynchronous mode). This is how it will be
//     * done in the competition. Can be played with and without visual display of
//     * game states.
//     *
//     * @param pacManController The Pac-Man controller
//     * @param ghostController The Ghosts controller
//     * @param visual Indicates whether or not to use visuals
//     */
//    public Game runGameTimed(Controller<MOVE> pacManController, Controller<EnumMap<GHOST, MOVE>> ghostController, boolean visual) {
//        return runGameTimed(pacManController, ghostController, visual, new Game(0));
//    }
//    public static boolean hold = false;
//
//    public Game runGameTimed(Controller<MOVE> pacManController, Controller<EnumMap<GHOST, MOVE>> ghostController, boolean visual, Game game) {
//        GameView gv = null;
//        //game._init();
//
//        if (visual) {
//            gv = new GameView(game).showGame();
//        }
//
//        if (pacManController instanceof HumanController) {
//            gv.getFrame().addKeyListener(((HumanController) pacManController).getKeyboardInput());
//        }
//
//        new Thread(pacManController).start();
//        new Thread(ghostController).start();
//
//        MOVE forcedMove = null;
//        while (!game.gameOver()) {
//            pacManController.update(game.copy(), System.currentTimeMillis() + DELAY);
//            ghostController.update(game.copy(), System.currentTimeMillis() + DELAY);
//
//            try {
//                Thread.sleep(DELAY);
//            } catch (InterruptedException e) {
//                e.printStackTrace();
//            }
//            
//            game.advanceGame(forcedMove != null ? forcedMove : pacManController.getMove(), ghostController.getMove());
//            forcedMove = null;
//
//            if (deaths != null) {
//                deaths.heatMap(new GameFacade(game));
//            }
//            if (hold) {
//                String result = MiscUtil.waitForReadStringAndEnterKeyPress();
//                if (result != null) {
//                    if (result.equals("n") || result.equals("next")) {
//                        break; // skip the trial
//                    } else if (result.equals("u") || result.equals("up")) {
//                        forcedMove = MOVE.UP; // force move up
//                    } else if (result.equals("d") || result.equals("down")) {
//                        forcedMove = MOVE.DOWN; // force move down
//                    } else if (result.equals("l") || result.equals("left")) {
//                        forcedMove = MOVE.LEFT; // force move left
//                    } else if (result.equals("r") || result.equals("right")) {
//                        forcedMove = MOVE.RIGHT; // force move right
//                    } else if (result.equals("h") || result.equals("hold")) {
//                        hold = false; // stop holding
//                    }
//                }
//            }
//
//            if (visual) {
//                gv.repaint();
//            }
//        }
//
//        pacManController.terminate();
//        ghostController.terminate();
//
//        gv.getFrame().dispose();
//        return game;
//    }
//
//    /**
//     * Run the game in asynchronous mode but proceed as soon as both controllers
//     * replied. The time limit still applies so so the game will proceed after
//     * 40ms regardless of whether the controllers managed to calculate a turn.
//     *
//     * @param pacManController The Pac-Man controller
//     * @param ghostController The Ghosts controller
//     * @param fixedTime Whether or not to wait until 40ms are up even if both
//     * controllers already responded
//     * @param visual Indicates whether or not to use visuals
//     * @param game instance of pacman game to use
//     */
//    public void runGameTimedSpeedOptimised(Controller<MOVE> pacManController, Controller<EnumMap<GHOST, MOVE>> ghostController, boolean fixedTime, boolean visual, Game game) {
//        GameView gv = null;
//
//        if (visual) {
//            gv = new GameView(game).showGame();
//        }
//
//        if (pacManController instanceof HumanController) {
//            gv.getFrame().addKeyListener(((HumanController) pacManController).getKeyboardInput());
//        }
//
//        new Thread(pacManController).start();
//        new Thread(ghostController).start();
//
//        while (!game.gameOver()) {
//            pacManController.update(game.copy(), System.currentTimeMillis() + DELAY);
//            ghostController.update(game.copy(), System.currentTimeMillis() + DELAY);
//
//            try {
//                int waited = DELAY / INTERVAL_WAIT;
//
//                for (int j = 0; j < DELAY / INTERVAL_WAIT; j++) {
//                    Thread.sleep(INTERVAL_WAIT);
//
//                    if (pacManController.hasComputed() && ghostController.hasComputed()) {
//                        waited = j;
//                        break;
//                    }
//                }
//
//                if (fixedTime) {
//                    Thread.sleep(((DELAY / INTERVAL_WAIT) - waited) * INTERVAL_WAIT);
//                }
//
//                game.advanceGame(pacManController.getMove(), ghostController.getMove());
//            } catch (InterruptedException e) {
//                e.printStackTrace();
//            }
//
//            if (visual) {
//                gv.repaint();
//            }
//        }
//
//        pacManController.terminate();
//        ghostController.terminate();
//    }
//
//    /**
//     * Run a game in asynchronous mode and recorded.
//     *
//     * @param pacManController The Pac-Man controller
//     * @param ghostController The Ghosts controller
//     * @param visual Whether to run the game with visuals
//     * @param fileName The file name of the file that saves the replay
//     */
//    public void runGameTimedRecorded(Game game, Controller<MOVE> pacManController, Controller<EnumMap<GHOST, MOVE>> ghostController, boolean visual, String fileName) {
//        StringBuilder replay = new StringBuilder();
//
//        //Game game = new Game(0);
//        GameView gv = null;
//
//        if (visual) {
//            gv = new GameView(game).showGame();
//
//            if (pacManController instanceof HumanController) {
//                gv.getFrame().addKeyListener(((HumanController) pacManController).getKeyboardInput());
//            }
//        }
//
//        new Thread(pacManController).start();
//        new Thread(ghostController).start();
//
//        while (!game.gameOver()) {
//            pacManController.update(game.copy(), System.currentTimeMillis() + DELAY);
//            ghostController.update(game.copy(), System.currentTimeMillis() + DELAY);
//
//            try {
//                Thread.sleep(DELAY);
//            } catch (InterruptedException e) {
//                e.printStackTrace();
//            }
//
//            game.advanceGame(pacManController.getMove(), ghostController.getMove());
//
//            if (visual) {
//                gv.repaint();
//            }
//
//            replay.append(game.getGameState() + "\n");
//        }
//
//        pacManController.terminate();
//        ghostController.terminate();
//
//        saveToFile(replay.toString(), fileName, false);
//    }
//
//    /**
//     * Replay a previously saved game.
//     *
//     * @param fileName The file name of the game to be played
//     * @param visual Indicates whether or not to use visuals
//     */
//    public void replayGame(String fileName, boolean visual, int delay) {
//        Scanner modes = null;
//        boolean modePheremone = Parameters.parameters.booleanParameter("modePheremone");
//        int scentMode = -1;
//        if (modePheremone) {
//            try {
//                modes = new Scanner(new File(Parameters.parameters.stringParameter("pacmanSaveFile") + ".modes"));
//                int numModes = 6; // Should set this according to actual num modes
//                ScentPath.modeScents = new ScentPath[numModes];
//                for (int i = 0; i < ScentPath.modeScents.length; i++) {
//                    ScentPath.modeScents[i] = new ScentPath(0.99, true, CombinatoricUtilities.mapTuple(i + 1));
//                }
//                scentMode = Parameters.parameters.integerParameter("scentMode");
//            } catch (FileNotFoundException ex) {
//                System.out.println("Cannot replay mode scent paths");
//            }
//        }
//
//        ArrayList<String> timeSteps = loadReplay(fileName);
//
//        Game game = new Game(0);
//
//        GameView gv = null;
//
//        if (visual) {
//            gv = new GameView(game).showGame();
//        }
//
//        int level = -1;
//        int lives = 10;
//        for (int j = 0; j < timeSteps.size(); j++) {
//            game.setGameState(timeSteps.get(j));
//            if (game.getCurrentLevel() != level || game.getPacmanNumberOfLivesRemaining() < lives) {
//                level = game.getCurrentLevel();
//                lives = game.getPacmanNumberOfLivesRemaining();
//                for (int i = 0; i < ScentPath.modeScents.length; i++) {
//                    ScentPath.modeScents[i].reset();
//                }
//                if (level >= Parameters.parameters.integerParameter("pacmanMaxLevel")) {
//                    return;
//                }
//            }
//
//            if (modePheremone) {
//                if (modes != null && modes.hasNext()) {
//                    int mode = modes.nextInt();
//                    modes.nextLine(); // Get carriage return
//                    GameFacade gf = new GameFacade(game);
//                    if (scentMode == -1) {
////                    for (int i = 0; i < ScentPath.modeScents.length; i++) {
////                        ScentPath.modeScents[i].visit(gf, game.getPacmanCurrentNodeIndex(), i == mode ? 1.0 : 0.0);
////                    }
//                        ScentPath.modeScents[mode].visit(gf, game.getPacmanCurrentNodeIndex(), 1);
//                    } else {
//                        ScentPath.modeScents[scentMode].visit(gf, game.getPacmanCurrentNodeIndex(), scentMode == mode ? 1.0 : 0.0);
//                    }
//                }
//            }
//
//            try {
//                Thread.sleep(delay);
//            } catch (InterruptedException e) {
//                e.printStackTrace();
//            }
//
//            if (hold) {
//                String result = MiscUtil.waitForReadStringAndEnterKeyPress();
//            }
//
//            if (visual) {
//                gv.repaint();
//            }
//        }
//    }
//
//    //save file for replays
//    public static void saveToFile(String data, String name, boolean append) {
//        try {
//            FileOutputStream outS = new FileOutputStream(name, append);
//            PrintWriter pw = new PrintWriter(outS);
//
//            pw.println(data);
//            pw.flush();
//            outS.close();
//
//        } catch (IOException e) {
//            System.out.println("Could not save data!");
//        }
//    }
//
//    //load a replay
//    private static ArrayList<String> loadReplay(String fileName) {
//        ArrayList<String> replay = new ArrayList<String>();
//
//        try {
//            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(fileName)));
//            String input = br.readLine();
//
//            while (input != null) {
//                if (!input.equals("")) {
//                    replay.add(input);
//                }
//
//                input = br.readLine();
//            }
//        } catch (IOException ioe) {
//            ioe.printStackTrace();
//        }
//
//        return replay;
//    }
    public static void main(String [] args)
	{
    	System.out.println("Hello World");
    	
    	long theSeed = 1000;//(use_random_seed)? RandomNumbers.randomGenerator.nextLong(): next_game_seed;
        boolean use_random_seed = true;
        //if (show_moves) System.out.println("\nCreating new game... (seed: " + theSeed + ")");
        Game newgame = (new GameFacade(new Game(theSeed))).newG;
        newgame.setExitLairEdible(false);
        newgame.setEndOnlyOnTimeLimit(true);
        newgame.setRandomLairExit(false);
        newgame.setSimultaneousLairExit(false);
        newgame.setEndAfterGhostEatingChances(false);
        newgame.playWithPills();
        newgame.playWithPowerPills();
        newgame.setEndAfterPowerPillsEaten(false);
        Controller<MOVE> pacManController = new NearestPillPacMan();
        Controller<EnumMap<GHOST, MOVE>> ghostController = new StarterGhosts();
//        CopyOfExecutor cpe = new CopyOfExecutor();
//        cpe.runExperiment_Socket(pacManController, ghostController, newgame);
        
	}
}
